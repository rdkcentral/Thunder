version = '@Thunder_VERSION_MAJOR@.@Thunder_VERSION_MINOR@.@Thunder_VERSION_PATCH@'
port = '@PORT@'
binding = '@BINDING@'
ipv6 = '@IPV6_SUPPORT@'
idletime = '@IDLE_TIME@'
softkillcheckwaittime = '@SOFT_KILL_CHECK_WAIT_TIME@'
hardkillcheckwaittime = '@HARD_KILL_CHECK_WAIT_TIME@'
persistentpath = '@PERSISTENT_PATH@/@NAMESPACE@'
volatilepath = '@VOLATILE_PATH@'
datapath = '@DATA_PATH@'
systempath = '@SYSTEM_PATH@'
proxystubpath = '@PROXYSTUB_PATH@'
postmortempath = '@POSTMORTEM_PATH@'
redirect = '/Service/Controller/UI'
ethernetcard = '@ETHERNETCARD_NAME@'
communicator = '@COMMUNICATOR@'

hibernate = JSON()
hibernate.add("locator", '@LOCATOR@')

process = JSON()
process.add("priority", '@PRIORITY@')
process.add("policy", '@POLICY@')
process.add("oomadjust", '@OOMADJUST@')
process.add("stacksize", '@STACKSIZE@')

__umask = '@UMASK@'

if(__umask != ''):
  process.add("umask", str(int(__umask, 8)))

process.add("group", '@GROUP@')

__exitreasons = '@EXIT_REASONS@'
exitreasons = __exitreasons.split(';')

__plugins = []

__resumes = []

if boolean('@PLUGIN_WEBKITBROWSER@'):
  __resumes.append("WebKitBrowser")

if boolean('@PLUGIN_ESPIAL@'):
  __resumes.append("EspialBrowser")

if boolean('@PLUGIN_WEBSERVER@'):
  __resumes.append("WebServer")

__controller_plugin_configuration = JSON()
__controller_plugin_configuration.add("resumes", __resumes)

__controller_plugin = JSON()
__controller_plugin.add("callsign", "Controller")
__controller_plugin.add("configuration", __controller_plugin_configuration)

__plugins.append(__controller_plugin)

plugins = __plugins

__vitualinput = JSON()
if boolean('@VIRTUALINPUT@'):
  if boolean('@KEY_OUTPUT_DISABLED@'):
    __vitualinput.add("type", "vitual")
    __vitualinput.add("output", False)
    input = __vitualinput
else:
  __vitualinput.add("locator", "/dev/uinput")
  __vitualinput.add("type", "device")
  if boolean('@KEY_OUTPUT_DISABLED@'):
    __vitualinput.add("output", False)
  input = __vitualinput

if boolean('@MESSAGING@'):
  messaging = JSON()
  messaging.add("path", '@MESSAGECONTROL_PATH@')
  messaging.add("port", '@MESSAGING_PORT@')
  messaging.add("stdout", '@MESSAGING_STDOUT@')
  messaging.add("stderr", '@MESSAGING_STDERR@')
  messaging.add("datasize", '@MESSAGING_DATASIZE@')

  __notification = {
       "category" : "AnyCategory",
       "enabled" : False
      }
  
  __fatal = {
       "category" : "AnyCategory",
       "enabled" : True
      }

  __tracing = {
       "module" : "Plugin_AnyModule",
       "enabled" : True
      }
  
  __warningReporting = {
       "category" : "AnyCategory",
       "enabled" : False
      }

  __logging_settings = []
  __logging_settings.append(__notification)
  
  __logging = JSON()
  __logging.add("abbreviated", True)
  __logging.add("settings", __logging_settings)
  
  messaging.add("logging", __logging)
  
  __tracing_settings = []

  __enable_tracing_modules = "@ENABLE_TRACING_MODULES@".strip()
  __modules =__enable_tracing_modules.split(' ') if __enable_tracing_modules else []
  
  if len(__modules) > 0:
    for module in __modules:
      __module = {
        "module" : module,
        "enabled" : True
        }
      __tracing_settings.append(__module)
  else:
    __tracing_settings.append(__tracing)
    __tracing_settings.append(__fatal)
  
  __tracing = JSON()
  __tracing.add("settings", __tracing_settings)
  
  messaging.add("tracing", __tracing)

  __reporting_settings = []
  __reporting_settings.append(__warningReporting)

  __reporting = JSON()
  __reporting.add("abbreviated", True)
  __reporting.add("settings", __reporting_settings)

  messaging.add("reporting", __reporting)
