{
  "$schema": "interface.schema.json",
  "jsonrpc": "2.0",
  "info": {
    "title": "Controller API",
    "class": "Controller",
    "description": "Controller JSON-RPC interface",
    "sourcelocation": "https://github.com/rdkcentral/Thunder/blob/master/Source/WPEFramework/json/{interfacefile}"
  },
  "common": {
    "$ref": "common.json"
  },
  "definitions": {
    "state": {
      "description": "State of the plugin",
      "type": "string",
      "enum": [
        "Deactivated",
        "Deactivation",
        "Activated",
        "Activation",
        "Suspended",
        "Resumed",
        "Precondition"
      ],
      "example": "Activated"
    },
    "plugin": {
      "type": "object",
      "properties": {
        "callsign": {
          "description": "Instance name of the plugin",
          "type": "string",
          "example": "DeviceInfo"
        },
        "locator": {
          "description": "Library name",
          "type": "string",
          "example": "libWPEFrameworkDeviceInfo"
        },
        "classname": {
          "description": "Class name",
          "type": "string",
          "example": "DeviceInfo"
        },
        "autostart": {
          "description": "Determines if the plugin is to be started automatically along with the framework",
          "type": "string",
          "example": true
        },
        "precondition": {
          "description": "List of subsystems the plugin depends on",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Platform",
              "Network",
              "Security",
              "Identifier",
              "Internet",
              "Location",
              "Time",
              "Provisioning",
              "Decryption",
              "Graphics",
              "WebSource",
              "Streaming"
            ],
            "example": "Platform",
            "description": "(a subsystem entry)"
          }
        },
        "configuration": {
          "description": "Custom configuration properties of the plugin",
          "type": "string",
          "properties": {},
          "required": []
        },
        "state": {
          "$ref": "#/definitions/state"
        },
        "processedrequests": {
          "type": "number",
          "description": "Number of API requests that have been processed by the plugin",
          "example": 2
        },
        "processedobjects": {
          "type": "number",
          "description": "Number of objects that have been processed by the plugin",
          "example": 0
        },
        "observers": {
          "type": "number",
          "description": "Number of observers currently watching the plugin (WebSockets)",
          "example": 0
        },
        "module": {
          "type": "string",
          "description": "Name of the plugin from a module perspective (used e.g. in tracing)",
          "example": "Plugin_DeviceInfo"
        },
        "hash": {
          "type": "string",
          "description": "SHA256 hash identifying the sources from which this plugin was build",
          "example": "custom"
        }
      },
      "required": [
        "callsign",
        "locator",
        "classname",
        "autostart",
        "state",
        "processedrequests",
        "processedobjects",
        "observers"
      ]
    },
    "server": {
      "type": "object",
      "properties": {
        "threads": {
          "description": "Thread pool",
          "type": "array",
          "items": {
            "type": "number",
            "description": "(a thread entry)"
          }
        },
        "pending": {
          "description": "Pending requests",
          "type": "number",
          "example": 0
        },
        "occupation": {
          "description": "Pool occupation",
          "type": "number",
          "example": 2
        }
      },
      "required": [
        "threads",
        "pending",
        "occupation"
      ]
    },
    "channel": {
      "type": "object",
      "properties": {
        "remote": {
          "type": "string",
          "description": "IP address (or FQDN) of the other side of the connection",
          "example": "localhost:52116"
        },
        "state": {
          "description": "State of the link",
          "type": "string",
          "enum": [
            "WebServer",
            "WebSocket",
            "RawSocket",
            "Closed",
            "Suspended"
          ],
          "example": "RawSocket"
        },
        "activity": {
          "type": "boolean",
          "description": "Denotes if there was any activity on this connection",
          "example": "false"
        },
        "id": {
          "description": "A unique number identifying the connection",
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Controller",
          "description": "Name of the connection"
        }
      },
      "required": [
        "remote",
        "state",
        "activity",
        "id"
      ]
    },
    "subsystemstatus": {
      "type": "object",
      "properties": {
        "subsystem": {
          "description": "Subsystem name",
          "type": "string",
          "enum": [
            "Platform",
            "Network",
            "Security",
            "Identifier",
            "Internet",
            "Location",
            "Time",
            "Provisioning",
            "Decryption",
            "Graphics",
            "WebSource",
            "Streaming"
          ],
          "example": "Platform"
        },
        "active": {
          "description": "Denotes whether the subsystem is active (true)",
          "type": "boolean",
          "example": true
        }
      },
      "required": [
        "subsystem",
        "active"
      ]
    }
  },
  "methods": {
    "Controller.1.activate": {
      "summary": "Activates a plugin",
      "description": "Use this method to activate a plugin, i.e. move from Deactivated, via Activating to Activated state. If a plugin is in the Activated state, it can handle JSON-RPC requests that are coming in. The plugin is loaded into memory only if it gets activated.",
      "events": [
        "statechange"
      ],
      "params": {
        "type": "object",
        "properties": {
          "callsign": {
            "description": "Plugin callsign",
            "type": "string",
            "example": "DeviceInfo"
          }
        }
      },
      "result": {
        "$ref": "#/common/results/void"
      },
      "errors": [
        {
          "description": "The plugin will be activated once its activation preconditions are met",
          "$ref": "#/common/errors/pendingconditions"
        },
        {
          "description": "The plugin is currently being activated",
          "$ref": "#/common/errors/inprogress"
        },
        {
          "description": "The plugin does not exist",
          "$ref": "#/common/errors/unknownkey"
        },
        {
          "description": "Failed to activate the plugin",
          "$ref": "#/common/errors/openingfailed"
        },
        {
          "description": "Current state of the plugin does not allow activation",
          "$ref": "#/common/errors/illegalstate"
        },
        {
          "description": "Activation of the plugin is not allowed (e.g. Controller)",
          "$ref": "#/common/errors/privilegedrequest"
        }
      ]
    },
    "Controller.1.deactivate": {
      "summary": "Deactivates a plugin",
      "description": "Use this method to deactivate a plugin, i.e. move from Activated, via Deactivating to Deactivated state. If a plugin is Deactivated, the actual plugin (.so) is no longer loaded into the memory of the process. In a deactivated state, the plugin will not respond to any JSON-RPC requests.",
      "events": [
        "statechange"
      ],
      "params": {
        "type": "object",
        "properties": {
          "callsign": {
            "description": "Callsign of the plugin",
            "type": "string",
            "example": "DeviceInfo"
          }
        }
      },
      "result": {
        "$ref": "#/common/results/void"
      },
      "errors": [
        {
          "description": "The plugin is currently being deactivated",
          "$ref": "#/common/errors/inprogress"
        },
        {
          "description": "The plugin does not exist",
          "$ref": "#/common/errors/unknownkey"
        },
        {
          "description": "Current state of the plugin does not allow deactivation",
          "$ref": "#/common/errors/illegalstate"
        },
        {
          "description": "Failed to activate the plugin",
          "$ref": "#/common/errors/closingfailed"
        },
        {
          "description": "Deactivation of the plugin is not allowed (e.g. Controller)",
          "$ref": "#/common/errors/privilegedrequest"
        }
      ]
    },
    "Controller.1.unavailable": {
      "summary": "Set a plugin unavailable for interaction",
      "description": "Use this method to mark a plugin as unavailable, i.e. move from Deactivated to Unavailable state. If a plugin is Unavailable, the actual plugin (.so) is no longer loaded into the memory of the process. The plugin will not respond to any JSON-RPC requests and it can not be startedunless it is first deactivated (which triggers a state transition.",
      "events": [
        "statechange"
      ],
      "params": {
        "type": "object",
        "properties": {
          "callsign": {
            "description": "Callsign of the plugin",
            "type": "string",
            "example": "DeviceInfo"
          }
        }
      },
      "result": {
        "$ref": "#/common/results/void"
      },
      "errors": [
        {
          "description": "The plugin does not exist",
          "$ref": "#/common/errors/unknownkey"
        },
        {
          "description": "Current state of the plugin does not allow setting to Unavailable",
          "$ref": "#/common/errors/illegalstate"
        },
        {
          "description": "Failed to activate the plugin",
          "$ref": "#/common/errors/closingfailed"
        },
        {
          "description": "Marking the plugin as unavailable is not allowed (e.g. Controller)",
          "$ref": "#/common/errors/privilegedrequest"
        }
      ]
    },
    "Controller.1.startdiscovery": {
      "summary": "Starts the network discovery",
      "description": "Use this method to initiate SSDP network discovery process.",
      "params": {
        "type": "object",
        "properties": {
          "ttl": {
            "description": "TTL (time to live) parameter for SSDP discovery",
            "type": "number",
            "size": 8,
            "example": 1
          }
        },
        "required": [
          "ttl"
        ]
      },
      "result": {
        "$ref": "#/common/results/void"
      }
    },
    "Controller.1.storeconfig": {
      "summary": "Stores the configuration",
      "description": "Use this method to save the current configuration to persistent memory.",
      "result": {
        "$ref": "#/common/results/void"
      },
      "errors": [
        {
          "description": "Failed to store the configuration",
          "$ref": "#/common/errors/general"
        }
      ]
    },
    "Controller.1.delete": {
      "summary": "Removes contents of a directory from the persistent storage",
      "description": "Use this method to recursively delete contents of a directory",
      "params": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to directory (within the persistent storage) to delete contents of",
            "example": "test/test.txt"
          }
        }
      },
      "result": {
        "$ref": "#/common/results/void"
      },
      "errors": [
        {
          "description": "The given path was incorrect",
          "$ref": "#/common/errors/unknownkey"
        },
        {
          "description": "The path points outside of persistent directory or some files/directories couldn't have been deleted",
          "$ref": "#/common/errors/privilegedrequest"
        }
      ]
    },
    "Controller.1.harakiri": {
      "summary": "Reboots the device",
      "description": "Use this method to reboot the device. Depending on the device, this call may not generate a response.",
      "result": {
        "$ref": "#/common/results/void"
      },
      "errors": [
        {
          "description": "Rebooting procedure is not available on the device",
          "$ref": "#/common/errors/unavailable"
        },
        {
          "description": "Insufficient privileges to reboot the device",
          "$ref": "#/common/errors/privilegedrequest"
        },
        {
          "description": "Failed to reboot the device",
          "$ref": "#/common/errors/general"
        }
      ]
    }
  },
  "properties": {
    "status": {
      "summary": "Information about plugins, including their configurations",
      "readonly": true,
      "index": {
        "name": "callsign",
        "description": "If the *callsign* is omitted, then status of all plugins is returned.",
        "example": "DeviceInfo"
      },
      "params": {
        "type": "array",
        "description": "A list of loaded plugins",
        "items": {
          "description": "(a plugin entry)",
          "$ref": "#/definitions/plugin"
        }
      },
      "errors": [
        {
          "description": "The plugin does not exist",
          "$ref": "#/common/errors/unknownkey"
        }
      ]
    },
    "links": {
      "summary": "Information about active connections",
      "readonly": true,
      "params": {
        "description": "List of active connections",
        "type": "array",
        "items": {
          "description": "(a connection entry)",
          "$ref": "#/definitions/channel"
        }
      }
    },
    "processinfo": {
      "summary": "Information about the framework process",
      "readonly": true,
      "params": {
        "$ref": "#/definitions/server"
      }
    },
    "subsystems": {
      "summary": "Status of the subsystems",
      "readonly": true,
      "params": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/subsystemstatus"
        }
      }
    },
    "discoveryresults": {
      "summary": "SSDP network discovery results",
      "readonly": true,
      "params": {
        "type": "array",
        "description": "List of network discovery results",
        "items": {
          "type": "object",
          "description": "(a discovery result entry)",
          "properties": {
            "locator": {
              "type": "string"
            },
            "latency": {
              "type": "number"
            },
            "model": {
              "type": "string"
            },
            "secure": {
              "type": "boolean",
              "example": true
            }
          },
          "required": [
            "locator",
            "latency",
            "model",
            "secure"
          ]
        }
      }
    },
    "environment": {
      "summary": "Value of an environment variable",
      "readonly": true,
      "index": {
        "name": "variable",
        "example": "SHELL"
      },
      "params": {
        "example": "/bin/sh",
        "type": "string"
      },
      "errors": [
        {
          "description": "The variable is not defined",
          "$ref": "#/common/errors/unknownkey"
        }
      ]
    },
    "configuration": {
      "summary": "Configuration object of a service",
      "index": {
        "name": "callsign",
        "example": "WebKitBrowser"
      },
      "params": {
        "type": "object",
        "description": "The configuration JSON object",
        "properties": {},
        "required": []
      },
      "errors": [
        {
          "description": "The service does not exist",
          "$ref": "#/common/errors/unknownkey"
        },
        {
          "description": "Failed to update the configuration",
          "$ref": "#/common/errors/general"
        }
      ]
    },
    "version": {
      "summary": "version of the controller",
      "params": {
        "example": "1.0",
        "type": "string"
      },
      "errors": [
        {
          "description": "Failed to get/update the version",
          "$ref": "#/common/errors/general"
        }
      ]
    },
    "prefix": {
      "type": "string",
      "summary": "prefix",
      "params": {
        "example": "prefix",
        "type": "string"
      },
      "errors": [
        {
          "description": "Failed to update the prefix",
          "$ref": "#/common/errors/general"
        }
      ]
    },
    "idletime": {
      "type": "number",
      "summary": "idle time",
      "params": {
        "example": "1",
        "type": "number"
      },
      "errors": [
        {
          "description": "Failed to update the idletime",
          "$ref": "#/common/errors/general"
        }
      ]
    },
    "latitude": {
      "type": "number",
      "summary": "latitude",
      "params": {
        "example": "100",
        "type": "number"
      },
      "errors": [
        {
          "description": "Failed to update the latitude",
          "$ref": "#/common/errors/general"
        }
      ]
    },
    "longitude": {
      "type": "number",
      "summary": "longitude",
      "params": {
        "example": "200",
        "type": "number"
      },
      "errors": [
        {
          "description": "Failed to update the longitude",
          "$ref": "#/common/errors/general"
        }
      ]
    }
  },
  "events": {
    "all": {
      "summary": "Signals each and every event in the system. The Controller plugin is an aggregator of all the events triggered by a specific plugin. All notifications send by any plugin are forwarded over the Controller socket as an event.",
      "params": {
        "type": "object",
        "properties": {
          "callsign": {
            "type": "string",
            "description": "Callsign of the originator plugin of the event",
            "example": "WebKitBrowser"
          },
          "data": {
            "type": "object",
            "description": "Object that was broadcasted as an event by the originator plugin",
            "properties": {},
            "required": []
          }
        },
        "required": [
          "callsign",
          "data"
        ]
      }
    },
    "statechange": {
      "summary": "Signals a plugin state change",
      "params": {
        "type": "object",
        "properties": {
          "callsign": {
            "type": "string",
            "description": "Callsign of the plugin that changed state",
            "example": "WebKitBrowser"
          },
          "state": {
            "$ref": "#/definitions/state"
          },
          "reason": {
            "type": "string",
            "enum": [
              "Requested",
              "Automatic",
              "Failure",
              "MemoryExceeded",
              "Startup",
              "Shutdown"
            ],
            "description": "Cause of the state change",
            "example": "Requested"
          }
        },
        "required": [
          "callsign",
          "state",
          "reason"
        ]
      }
    },
    "subsystemchange": {
      "summary": "Signals a subsystem state change",
      "params": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/subsystemstatus"
        }
      }
    }
  }
}
