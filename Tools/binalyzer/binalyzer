#!/bin/bash

# If not stated otherwise in this file or this component's license file the
# following copyright and licenses apply:
#
# Copyright 2020 Metrological
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


argv0=${0##*/}

: ${ROOT:=${PWD}}

read -r -d '' BIN_LIST <<'EOF'
/usr/bin/WPEFramework
/usr/bin/WPEProcess
EOF

usage() {
    cat <<-EOF
    Display Application binary and its dependencies with size. Depends on lddtree.
    Install pax-utils (apt-get install pax-utils for Debian based distros)

    Usage: ${argv0} [options]

    Options:
      -R <root>         Use this ROOT filesystem tree
      -b <bin file>     Application bin file - with Relative path from root filesystem
      -i <Input file>   New line separated list of applications with relative path from Root filesystem
      -l <Libs dir>     Analyse libs in this directory
      -h                Show this help output
EOF
    exit 1;
}

print_sizes() {
    local bin_root=$1
    local bin_name=$2
    local dep_list=$3

    file_size=$(stat -L --format=%s "${bin_root}/${bin_name}")
    total_size=${file_size}
    printf "%0.s-" {1..72}
    printf '\n'
    printf '\t%-36s  %s\n' "Bin File" "Size in Bytes"
    printf "%0.s-" {1..72}
    printf '\n'
    
    printf '%-48s  %s\n' ${bin_name##*/} ${file_size}

    #Remove First line
    dep_list=${dep_list#*$'\n'}

    while IFS= read -r line; do
        dep_name="${line%%=>*}"
        location="${line##*=>}"
        if [[ $location == *"not found"* ]]; then
            location="$(find ${bin_root} -name ${dep_name} | head -1)"
        fi
        if dep_size=$(stat -L --format=%s ${location}); then
            total_size=$(($total_size+$dep_size))
            printf '%-48s  %s\n' "${dep_name}" "${dep_size}"
        fi
    done <<< "$dep_list"
    printf "%0.s-" {1..72}
    printf '\n'
    printf '%-48s  %s\n' "  Total Size" "${total_size}"
    printf "%0.s-" {1..72}
    printf '\n'

}

print_list() {
    local bin_root=$1
    local bin_list=$2

    while IFS= read -r line; do
        if lddop=$(LD_LIBRARY_PATH="$LDPATH" lddtree -R ${bin_root} ${line}); then
            print_sizes "${bin_root}" "${line}" "${lddop}"
        fi
    done <<< "$bin_list"
}

while getopts "b:i:R:l:" OPT; do
    case "${OPT}" in
        b)  # Relative path of the BIN file to analyse.
            BIN=${OPTARG}
            ;;
        R)  # Root file system directory
            ROOT=${OPTARG}
            [ -d ${ROOT} ] || usage
            ;;
        i)  # Input file with a new line separated list of Applications with relative paths to ROOT file system
            INPUT_FILE=${OPTARG}
            [ -f ${CONFIG} ] || usage
            ;;
        l)  # Directory (Relative to rootfs) to analyse
            BIN_DIR=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if ! command -v lddtree &> /dev/null
then
    echo "lddtree could not be found. sudo apt install pax-utils"
    exit
fi

LDPATH="$LD_LIBRARY_PATH:${ROOT}/lib:${ROOT}/lib32:${ROOT}/usr/lib:${ROOT}/usr/lib32:${ROOT}/usr/libexec"

if [ ! -z "${BIN}" ]; then
    if [ ! -f "${ROOT}/${BIN}" ]; then
        echo "${ROOT}/${BIN} does not exist"
        exit
    fi
    if LDD_OP=$(LD_LIBRARY_PATH="$LDPATH" lddtree -R ${ROOT} ${BIN}); then
        print_sizes "${ROOT}" "${BIN}" "${LDD_OP}"
        exit
    fi    
fi

if [ ! -z "${BIN_DIR}" ]; then
    if [ ! -d "${ROOT}/${BIN_DIR}" ]; then
        echo "${ROOT}/${BIN_DIR} does not exist"
        exit
    fi
    files=`ls -1 ${ROOT}/${BIN_DIR}`
    files=$(sed -e "s#^#${BIN_DIR}#" <<< ${files})
    print_list "${ROOT}" "${files}"
    exit
fi

if [ ! -z "${INPUT_FILE}" ]; then
    if [ -f "${INPUT_FILE}" ]; then
        print_list "${ROOT}" "$(<$INPUT_FILE)"
    else
        echo "${INPUT_FILE} does not exist"
    fi
else
    print_list "${ROOT}" "${BIN_LIST}"
fi

